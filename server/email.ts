import nodemailer from "nodemailer";

export interface ComicEmailData {
  childName: string;
  childEmail: string;
  parentEmail: string;
  storyTitle: string;
  storyDescription: string;
  characters: Array<{
    name: string;
    appearance: string;
    personality: string;
    role: string;
  }>;
  imageUrl: string;
}

// Create transporter using Gmail (you can change this to any email service)
const createTransporter = () => {
  return nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: process.env.EMAIL_USER, // Your Gmail address
      pass: process.env.EMAIL_APP_PASSWORD, // Your Gmail App Password
    },
  });
};

export async function sendComicEmail(data: ComicEmailData) {
  const transporter = createTransporter();

  const htmlContent = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
      <h1 style="color: #333; text-align: center;">ðŸŽ¨ New Comic Created! ðŸŽ¨</h1>
      
      <div style="background-color: #f8f9fa; padding: 20px; border-radius: 10px; margin: 20px 0;">
        <h2 style="color: #495057;">Story Details</h2>
        <p><strong>Title:</strong> ${data.storyTitle}</p>
        <p><strong>Description:</strong> ${data.storyDescription}</p>
        <p><strong>Created by:</strong> ${data.childName}</p>
      </div>

      <div style="background-color: #e3f2fd; padding: 20px; border-radius: 10px; margin: 20px 0;">
        <h3 style="color: #1565c0;">Characters</h3>
        ${data.characters.map(char => `
          <div style="margin-bottom: 15px; padding: 10px; background-color: white; border-radius: 5px;">
            <h4 style="margin: 0; color: #333;">${char.name}</h4>
            <p style="margin: 5px 0;"><strong>Appearance:</strong> ${char.appearance}</p>
            <p style="margin: 5px 0;"><strong>Personality:</strong> ${char.personality}</p>
            <p style="margin: 5px 0;"><strong>Role:</strong> ${char.role}</p>
          </div>
        `).join('')}
      </div>

      <div style="text-align: center; margin: 30px 0;">
        <h3 style="color: #333;">Generated Comic</h3>
        <img src="${data.imageUrl}" alt="Generated Comic" style="max-width: 100%; height: auto; border-radius: 10px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
      </div>

      <div style="background-color: #fff3cd; padding: 15px; border-radius: 10px; margin: 20px 0;">
        <p style="margin: 0; color: #856404;">
          <strong>Note:</strong> This comic was generated using AI based on the story and characters created by ${data.childName}. 
          Great creativity! ðŸŒŸ
        </p>
      </div>

      <hr style="border: none; border-top: 1px solid #dee2e6; margin: 30px 0;">
      
      <p style="text-align: center; color: #6c757d; font-size: 14px;">
        Generated by ChildComicCraft - Where imagination meets technology!
      </p>
    </div>
  `;

  const mailOptions = {
    from: process.env.EMAIL_USER,
    to: data.parentEmail,
    cc: [data.childEmail, process.env.ADMIN_EMAIL].filter(Boolean).join(','),
    subject: `ðŸŽ¨ ${data.childName}'s New Comic: "${data.storyTitle}"`,
    html: htmlContent,
  };

  try {
    const result = await transporter.sendMail(mailOptions);
    console.log('Email sent successfully:', result.messageId);
    return { success: true, messageId: result.messageId };
  } catch (error) {
    console.error('Email sending failed:', error);
    throw new Error(`Failed to send email: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}
